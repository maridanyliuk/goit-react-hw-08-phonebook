{"version":3,"file":"static/js/863.51e3649a.chunk.js","mappings":"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","sources":["components/RefreshLoader/RefreshLoader.jsx","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login.styled.jsx","pages/Login.jsx"],"sourcesContent":["import { Grid } from 'react-loader-spinner';\n\nexport const PageLoader = () => {\n  return (\n    <Grid\n      height=\"200\"\n      width=\"200\"\n      color=\"#d90368\"\n      ariaLabel=\"grid-loading\"\n      radius=\"12.5\"\n      wrapperStyle={{\n        marginTop: '200px',\n        marginRight: 'auto',\n        marginLeft: 'auto',\n        display: 'block',\n        width: '200px',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikErrorMessage } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  padding: 20px;\n  border: 2px dashed #d90368;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: 12px auto;\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 14px;\n  color: red;\n`;\n\n","import { Button, FormControl, FormLabel, Icon, IconButton, Input, InputGroup, InputLeftElement, InputRightElement,} from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/authOperations';\nimport { GoMail } from 'react-icons/go';\nimport { Si1Password } from 'react-icons/si';\nimport { BiShow, BiHide } from 'react-icons/bi';\nimport { SlLogin } from 'react-icons/sl';\nimport { useAuth } from 'hooks';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { PageLoader } from 'components/RefreshLoader/RefreshLoader';\nimport { ErrorMessage, Form } from './LoginForm.styled';\n\nconst FormSchema = Yup.object().shape({\n  email: Yup.string().email().required('Required field!'),\n  password: Yup.mixed().required('Required field!'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const { isLoading } = useAuth();\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n\n  return (\n    <>\n      {isLoading ? (\n        <PageLoader />\n      ) : (\n        <Formik\n          initialValues={{ email: '', password: '' }}\n          validationSchema={FormSchema}\n          onSubmit={(values, actions) => {\n            dispatch(\n              logIn({\n                email: values.email,\n                password: values.password,\n              })\n            );\n            actions.resetForm();\n          }}\n        >\n          {props => {\n            const isErrorEmail = !props.values.email && props.touched.email;\n            const isErrorPassword =\n              !props.values.password && props.touched.password;\n            return (\n              <Form>\n                <Field name=\"email\">\n                  {({ field }) => (\n                    <FormControl isRequired isInvalid={isErrorEmail} mb={3}>\n                      <FormLabel>Email</FormLabel>\n                      <InputGroup>\n                        <Input\n                          {...field}\n                          focusBorderColor=\"#00cc66\"\n                          placeholder=\"Enter email\"\n                           bg=\"white\"\n                        />\n                        <InputLeftElement pointerEvents=\"none\">\n                          <Icon as={GoMail} color=\"grey.800\" />\n                        </InputLeftElement>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n                </Field>\n                <ErrorMessage name=\"email\" component=\"div\" />\n                <Field name=\"password\">\n                  {({ field }) => (\n                    <FormControl isRequired isInvalid={isErrorPassword}>\n                      <FormLabel>Password</FormLabel>\n                      <InputGroup size=\"md\">\n                        <Input\n                          {...field}\n                          focusBorderColor=\"#00cc66\"\n                          pr=\"4.5rem\"\n                          type={show ? 'text' : 'password'}\n                          placeholder=\"Enter password\"\n                           bg=\"white\"\n                        />\n                        <InputLeftElement pointerEvents=\"none\">\n                          <Icon as={Si1Password} color=\"grey.800\" />\n                        </InputLeftElement>\n                        <InputRightElement width=\"4.5rem\">\n                          {show ? (\n                            <IconButton\n                              h=\"1.75rem\"\n                              size=\"lg\"\n                              variant=\"ghost\"\n                              icon={<BiShow />}\n                              onClick={handleClick}\n                            ></IconButton>\n                          ) : (\n                            <IconButton\n                              h=\"1.75rem\"\n                              size=\"lg\"\n                              variant=\"ghost\"\n                              icon={<BiHide />}\n                              onClick={handleClick}\n                            ></IconButton>\n                          )}\n                        </InputRightElement>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n                </Field>\n                <ErrorMessage name=\"password\" component=\"div\" />\n                <Button\n                  leftIcon={<SlLogin />}\n                  mt={4}\n                  backgroundColor=\"#f1c40f\"\n                  colorScheme=\"orange\"\n                  isLoading={props.isSubmitting}\n                  type=\"submit\"\n                >\n                  Log in\n                </Button>\n              </Form>\n            );\n          }}\n        </Formik>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { NavLink as StyledLink } from 'react-router-dom';\n\nexport const Title = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  @media screen and (min-width: 320px) and (max-width: 767px) {\n    font-size: 20px;\n  }\n`;\n\nexport const Text = styled.p`\n  font-size: 16px;\n`;\n\nexport const Link = styled(StyledLink)`\n  color: #d90368;\n  font-size: 16px;\n  border-bottom: 1px solid #d90368;\n`;\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Link, Title } from './Login.styled';\n\nconst Login = () => {\n  return (\n    <div>\n      <Title>Log In</Title>\n      <LoginForm />\n      <p>\n        Don't have an account? <Link to=\"/register\">Sign up</Link>\n      </p>\n    </div>\n  );\n};\n\nexport default Login;\n"],"names":["PageLoader","_jsx","Grid","height","width","color","ariaLabel","radius","wrapperStyle","marginTop","marginRight","marginLeft","display","wrapperClass","visible","Form","styled","FormikForm","_templateObject","_taggedTemplateLiteral","ErrorMessage","FormikErrorMessage","_templateObject2","FormSchema","Yup","shape","email","required","password","LoginForm","dispatch","useDispatch","isLoading","useAuth","_useState","useState","_useState2","_slicedToArray","show","setShow","handleClick","_Fragment","children","Formik","initialValues","validationSchema","onSubmit","values","actions","logIn","resetForm","props","isErrorEmail","touched","isErrorPassword","_jsxs","Field","name","_ref","field","FormControl","isRequired","isInvalid","mb","FormLabel","InputGroup","Input","_objectSpread","focusBorderColor","placeholder","bg","InputLeftElement","pointerEvents","Icon","as","GoMail","component","_ref2","size","pr","type","Si1Password","InputRightElement","IconButton","h","variant","icon","BiShow","onClick","BiHide","Button","leftIcon","SlLogin","mt","backgroundColor","colorScheme","isSubmitting","Title","Link","StyledLink","_templateObject3","to"],"sourceRoot":""}