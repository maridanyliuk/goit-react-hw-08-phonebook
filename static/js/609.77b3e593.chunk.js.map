{"version":3,"file":"static/js/609.77b3e593.chunk.js","mappings":"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","sources":["components/RefreshLoader/RefreshLoader.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.styled.jsx","pages/Register.jsx"],"sourcesContent":["import { Grid } from 'react-loader-spinner';\n\nexport const PageLoader = () => {\n  return (\n    <Grid\n      height=\"200\"\n      width=\"200\"\n      color=\"#d90368\"\n      ariaLabel=\"grid-loading\"\n      radius=\"12.5\"\n      wrapperStyle={{\n        marginTop: '200px',\n        marginRight: 'auto',\n        marginLeft: 'auto',\n        display: 'block',\n        width: '200px',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikErrorMessage } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  padding: 20px;\n  border: 2px dashed #d90368;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: 12px auto;\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 14px;\n  color: red;\n`;\n","import { useAuth } from 'hooks';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/authOperations';\nimport { ErrorMessage, Form } from './RegisterForm.styled';\nimport { Field, Formik } from 'formik';\nimport { PageLoader } from 'components/RefreshLoader/RefreshLoader';\nimport { FormControl, FormLabel, Input, InputLeftElement, InputGroup, Icon, InputRightElement, IconButton, Button, } from '@chakra-ui/react';\n\nimport { FiUser } from 'react-icons/fi';\nimport { HiOutlinePencilSquare } from 'react-icons/hi2';\nimport { BiShow, BiHide } from 'react-icons/bi';\nimport { Si1Password } from 'react-icons/si';\nimport { GoMail } from 'react-icons/go';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.mixed().required('Required field!'),\n  email: Yup.string().email().required('Required field!'),\n  password: Yup.string().min(7).required('Required field!'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const { isLoading } = useAuth();\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n\n  return (\n    <>\n      {isLoading ? (\n        <PageLoader />\n      ) : (\n        <Formik\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n          }}\n          validationSchema={FormSchema}\n          onSubmit={(values, actions) => {\n            dispatch(\n              register({\n                name: values.name,\n                email: values.email,\n                password: values.password,\n              })\n            );\n            actions.resetForm();\n          }}\n        >\n          {props => {\n            const isErrorName = !props.values.name && props.touched.name;\n            const isErrorEmail = !props.values.email && props.touched.email;\n            const isErrorPassword =\n              !props.values.password && props.touched.password;\n            return (\n              <Form>\n                <Field name=\"name\">\n                  {({ field }) => (\n                    <FormControl isRequired isInvalid={isErrorName} mb={3}>\n                      <FormLabel>Name</FormLabel>\n                      <InputGroup>\n                        <Input\n                          {...field}\n                          focusBorderColor=\"#00cc66\"\n                          placeholder=\"Enter name\"\n                        />\n                        <InputLeftElement pointerEvents=\"none\">\n                          <Icon as={FiUser} color=\"grey.800\" />\n                        </InputLeftElement>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n                </Field>\n                <ErrorMessage name=\"name\" component=\"span\" />\n                <Field name=\"email\">\n                  {({ field }) => (\n                    <FormControl isRequired isInvalid={isErrorEmail} mb={3}>\n                      <FormLabel>Email</FormLabel>\n                      <InputGroup>\n                        <Input\n                          {...field}\n                          focusBorderColor=\"#00cc66\"\n                          placeholder=\"Enter email\"\n                        />\n                        <InputLeftElement pointerEvents=\"none\">\n                          <Icon as={GoMail} color=\"grey.800\" />\n                        </InputLeftElement>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n                </Field>\n                <ErrorMessage name=\"email\" component=\"span\" />\n                <Field name=\"password\">\n                  {({ field }) => (\n                    <FormControl isRequired isInvalid={isErrorPassword}>\n                      <FormLabel>Password</FormLabel>\n                      <InputGroup size=\"md\">\n                        <Input\n                          {...field}\n                          focusBorderColor=\"#00cc66\"\n                          pr=\"4.5rem\"\n                          type={show ? 'text' : 'password'}\n                          placeholder=\"Enter password\"\n                        />\n                        <InputLeftElement pointerEvents=\"none\">\n                          <Icon as={Si1Password} color=\"grey.800\" />\n                        </InputLeftElement>\n                        <InputRightElement width=\"4.5rem\">\n                          {show ? (\n                            <IconButton\n                              h=\"1.75rem\"\n                              size=\"lg\"\n                              variant=\"ghost\"\n                              icon={<BiShow />}\n                              onClick={handleClick}\n                            ></IconButton>\n                          ) : (\n                            <IconButton\n                              h=\"1.75rem\"\n                              size=\"lg\"\n                              variant=\"ghost\"\n                              icon={<BiHide />}\n                              onClick={handleClick}\n                            ></IconButton>\n                          )}\n                        </InputRightElement>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n                </Field>\n                <ErrorMessage name=\"password\" component=\"span\" />\n                <Button\n                  leftIcon={<HiOutlinePencilSquare />}\n                  mt={4}\n                  backgroundColor=\"#f1c40f\"\n                  colorScheme=\"orange\"\n                  isLoading={props.isSubmitting}\n                  type=\"submit\"\n                >\n                  Sign up\n                </Button>\n              </Form>\n            );\n          }}\n        </Formik>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  @media screen and (min-width: 320px) and (max-width: 767px) {\n    font-size: 20px;\n  }\n`;\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Title } from './Register.styled';\n\nexport default function Register() {\n  return (\n    <div>\n      <Title>Register</Title>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["PageLoader","_jsx","Grid","height","width","color","ariaLabel","radius","wrapperStyle","marginTop","marginRight","marginLeft","display","wrapperClass","visible","Form","styled","FormikForm","_templateObject","_taggedTemplateLiteral","ErrorMessage","FormikErrorMessage","_templateObject2","FormSchema","Yup","shape","name","required","email","password","min","RegisterForm","dispatch","useDispatch","isLoading","useAuth","_useState","useState","_useState2","_slicedToArray","show","setShow","handleClick","_Fragment","children","Formik","initialValues","validationSchema","onSubmit","values","actions","register","resetForm","props","isErrorName","touched","isErrorEmail","isErrorPassword","_jsxs","Field","_ref","field","FormControl","isRequired","isInvalid","mb","FormLabel","InputGroup","Input","_objectSpread","focusBorderColor","placeholder","InputLeftElement","pointerEvents","Icon","as","FiUser","component","_ref2","GoMail","_ref3","size","pr","type","Si1Password","InputRightElement","IconButton","h","variant","icon","BiShow","onClick","BiHide","Button","leftIcon","HiOutlinePencilSquare","mt","backgroundColor","colorScheme","isSubmitting","Title","Register"],"sourceRoot":""}