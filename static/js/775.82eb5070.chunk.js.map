{"version":3,"file":"static/js/775.82eb5070.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactModal/ContactModal.styled.jsx","components/ContactModal/ContactModal.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.styled.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  ErrorMessage as FormikErrorMessage,\n  Field as FormikInput,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  max-width: 500px;\n  padding: 20px;\n  border: 2px dashed #d90368;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: auto;\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 14px;\n  color: red;\n`;\n\nexport const Field = styled(FormikInput)`\n  box-sizing: border-box;\n\n  padding: 5px 20px;\n  font-size: 24px;\n  line-height: 1.5;\n\n  border-radius: 4px;\n`;\n","import { Formik, Field } from 'formik';\nimport { Form, ErrorMessage } from './ContactForm.styled';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations'; // Вкажіть правильний шлях до вашого contactsSlice // Вкажіть правильний шлях до вашого селектора контактів\n\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Icon,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { FiUser } from 'react-icons/fi';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\nimport { BsTelephone } from 'react-icons/bs';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string().required('Required field!'),\n  number: Yup.number().positive('Must be > 0!').required('Required field!'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, actions) => {\n    const isExist = contacts.find(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (isExist) {\n      alert(`${values.name} is already in your contacts list`);\n    }\n\n    dispatch(addContact({ ...values, id: nanoid() }));\n    actions.resetForm();\n  };\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={FormSchema}\n       onSubmit={handleSubmit}\n    >\n      {props => {\n        const isErrorName = !props.values.name && props.touched.name;\n        const isErrorNumber = !props.values.number && props.touched.number;\n\n        return (\n          <Form>\n            <Field name=\"name\">\n              {({ field }) => (\n                <FormControl isInvalid={isErrorName} isRequired>\n                  <FormLabel>Name</FormLabel>\n                  <InputGroup>\n                    <Input\n                      {...field}\n                      placeholder=\"Enter name\"\n                      focusBorderColor=\"#00cc66\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={FiUser} />\n                    </InputLeftElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessage name=\"name\" component=\"span\" />\n            <Field name=\"number\">\n              {({ field }) => (\n                <FormControl isInvalid={isErrorNumber} isRequired>\n                  <FormLabel>Number</FormLabel>\n                  <InputGroup>\n                    <Input\n                      {...field}\n                      focusBorderColor=\"#00cc66\"\n                      placeholder=\"Enter number\"\n                      type=\"tel\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={BsTelephone} />\n                    </InputLeftElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessage name=\"number\" component=\"span\" />\n            <Button\n              leftIcon={<AiOutlineUserAdd />}\n              mt={4}\n              backgroundColor=\"#f1c40f\"\n              colorScheme=\"orange\"\n              type=\"submit\"\n            >\n              Add contact\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\n\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: auto;\n  list-style: none;\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  border-radius: 4px;\n  background-color: #D3F8E2;\n`;\n\nexport const ContactName = styled.p`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 14px;\n  font-weight: 500;\n  @media screen and (min-width: 480px) {\n    font-weight: 700;\n    font-size: 18px;\n  }\n`;\n\nexport const ContactNumber = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 14px;\n  font-weight: 500;\n  @media screen and (min-width: 480px) {\n    font-weight: 700;\n    font-size: 18px;\n  }\n`;\n","import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikInput,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 14px;\n  color: red;\n`;\n\nexport const Form = styled(FormikForm)`\n  position: relative;\n  margin: auto;\n\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 20px 40px;\n\n  background-color: white;\n  border-radius: 4px;\n`;\n\nexport const Field = styled(FormikInput)`\n  box-sizing: border-box;\n\n  padding: 5px 20px;\n  font-size: 24px;\n  line-height: 1.5;\n\n  border-radius: 8px;\n`;\n","import { Form, Field, ErrorMessage } from './ContactModal.styled';\nimport PropTypes from 'prop-types';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalBody, ModalCloseButton,\nIcon, InputLeftElement, FormControl, FormLabel, InputGroup,Input,\n} from '@chakra-ui/react';\nimport { FiUser } from 'react-icons/fi';\nimport { BsTelephone } from 'react-icons/bs';\nimport { Button } from '@chakra-ui/button';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\nimport { Formik } from 'formik';\nimport { editContact } from 'redux/contacts/contactsOperations';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string().required('Required field!'),\n  number: Yup.number().required('Required field!'),\n});\n\nexport const ContactModalWindow = ({ contact, isOpen, onClose }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Modal\n      closeOnOverlayClick={false}\n      isCentered\n      isOpen={isOpen}\n      onClose={onClose}\n      motionPreset=\"slideInBottom\"\n    >\n      <ModalOverlay bg=\"none\" backdropFilter=\"auto\" backdropBlur=\"3px\" />\n      <ModalContent w={{ base: '320px', md: '400px' }}>\n        <ModalHeader p={'10px 15px 0px 15px'}>Edit Contact</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody p={'8px 15px 8px 15px'}>\n          <Formik\n            initialValues={{\n              name: contact.name,\n              number: contact.number,\n            }}\n            validationSchema={FormSchema}\n            onSubmit={(values, actions) => {\n              dispatch(\n                editContact({\n                  id: contact.id,\n                  name: values.name,\n                  number: values.number,\n                })\n              );\n              actions.resetForm();\n            }}\n          >\n            {props => {\n              const isErrorName = !props.values.name && props.touched.name;\n              const isErrorNumber =\n                !props.values.number && props.touched.number;\n\n              return (\n                <Form>\n                  <Field name=\"name\">\n                    {({ field }) => (\n                      <FormControl isInvalid={isErrorName} mb={3}>\n                        <FormLabel>Name</FormLabel>\n                        <InputGroup>\n                          <Input\n                            {...field}\n                            placeholder=\"Enter name\"\n                            focusBorderColor=\"#00cc66\"\n                          />\n                          <InputLeftElement pointerEvents=\"none\">\n                            <Icon as={FiUser} color=\"grey.800\" />\n                          </InputLeftElement>\n                        </InputGroup>\n                      </FormControl>\n                    )}\n                  </Field>\n                  <ErrorMessage name=\"name\" component=\"div\" />\n                  <Field name=\"number\">\n                    {({ field }) => (\n                      <FormControl isInvalid={isErrorNumber}>\n                        <FormLabel>Number</FormLabel>\n                        <InputGroup>\n                          <Input\n                            {...field}\n                            focusBorderColor=\"#00cc66\"\n                            placeholder=\"Enter number\"\n                            type=\"tel\"\n                          />\n                          <InputLeftElement pointerEvents=\"none\">\n                            <Icon as={BsTelephone} color=\"grey.800\" />\n                          </InputLeftElement>\n                        </InputGroup>\n                      </FormControl>\n                    )}\n                  </Field>\n                  <ErrorMessage name=\"number\" component=\"div\" />\n                  <Button\n                    leftIcon={<AiOutlineUserAdd />}\n                    mt={4}\n                    backgroundColor=\"#f1c40f\"\n                    colorScheme=\"yellow\"\n                    isLoading={props.isSubmitting}\n                    type=\"submit\"\n                  >\n                    Change contact\n                  </Button>\n                </Form>\n              );\n            }}\n          </Formik>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nContactModalWindow.propTypes = {\n  contact: PropTypes.object.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { RiDeleteBin2Line } from 'react-icons/ri';\nimport { List, Item, ContactName, ContactNumber } from './ContactList.styled';\nimport { FiUser } from 'react-icons/fi';\nimport { BsTelephone } from 'react-icons/bs';\nimport { GrContactInfo } from 'react-icons/gr';\nimport { ButtonGroup, IconButton } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { ContactModalWindow } from 'components/ContactModal/ContactModal';\n\nexport const ContactList = ({ contacts, onDelete }) => {\n  const [isOpen, setIsOpen] = useState({});\n\n  const handleOpen = contactId => {\n    setIsOpen(prevIsOpen => ({ ...prevIsOpen, [contactId]: true }));\n  };\n\n  const handleClose = contactId => {\n    setIsOpen(prevIsOpen => ({ ...prevIsOpen, [contactId]: false }));\n  };\n  return (\n    <List>\n      {contacts.map(contact => {\n        const isModalOpen = isOpen[contact.id] || false;\n        return (\n          <Item key={contact.id}>\n            <ContactName>\n              <FiUser />\n              {contact.name}:\n            </ContactName>\n            <ContactNumber>\n              <BsTelephone />\n              {contact.number}\n            </ContactNumber>\n            <ButtonGroup\n              size={{ base: 'sm', md: 'lg' }}\n              isAttached\n              variant=\"solid\"\n            >\n              <IconButton\n                colorScheme=\"yellow\"\n                icon={<GrContactInfo fill='white' />}\n                onClick={() => handleOpen(contact.id)}\n              />\n              <IconButton\n                colorScheme=\"red\"\n                icon={<RiDeleteBin2Line />}\n                onClick={() => onDelete(contact.id)}\n              />\n            </ButtonGroup>\n            <ContactModalWindow\n              contact={contact}\n              isOpen={isModalOpen}\n              onClose={() => handleClose(contact.id)}\n            />\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import { FormControl, FormLabel, Icon, Input, InputGroup, InputLeftElement,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectStatusFilter } from 'redux/contacts/contactsSelectors';\nimport { FiUser } from 'react-icons/fi';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n\n  const onChangeInput = e => dispatch(setFilter(e.target.value));\n  return (\n    <FormControl>\n      <FormLabel>Find contacts by name</FormLabel>\n      <InputGroup>\n        <Input\n          focusBorderColor=\"#00cc66\"\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={onChangeInput}\n          placeholder=\"Enter name\"\n        />\n        <InputLeftElement pointerEvents=\"none\">\n          <Icon as={FiUser} />\n        </InputLeftElement>\n      </InputGroup>\n    </FormControl>\n  );\n};\n\n\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  font-size: 28px;\n  font-weight: 700;\n`;\nexport const DivContacts = styled.div`\n  display: flex;\n  gap: 12px;\n  flex-direction: column;\n`;\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { Loader } from '../components/Loader/Loader';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from 'redux/contacts/contactsOperations';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n  selectStatusFilter,\n} from 'redux/contacts/contactsSelectors';\nimport { Title, DivContacts } from './Contacts.styled';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const filter = useSelector(selectStatusFilter);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const doAddContact = newContact => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in contacts`);\n    } else {\n      dispatch(addContact(newContact));\n    }\n  };\n  const doDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const onChangeInput = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  const filterNew = () => {\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  };\n  return (\n    <>\n      <DivContacts>\n        <Title>Phonebook</Title>\n        <ContactForm onAdd={doAddContact} />\n      </DivContacts>\n      <DivContacts>\n        <div>\n          {contacts.length !== 0 && <Title>Contacts</Title>}\n          {contacts.length > 0 && (\n            <Filter filter={filter} onChangeInput={onChangeInput}></Filter>\n          )}\n        </div>\n        <div>\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <ContactList\n              contacts={filterNew()}\n              onDelete={doDeleteContact}\n            ></ContactList>\n          )}\n          {error && <p>Oops, something wrong is going on...</p>}\n        </div>\n      </DivContacts>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","FormikForm","_templateObject","_taggedTemplateLiteral","ErrorMessage","FormikErrorMessage","_templateObject2","FormikInput","_templateObject3","FormSchema","Yup","shape","name","required","number","positive","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","find","_ref","toLowerCase","alert","concat","addContact","_objectSpread","id","nanoid","resetForm","children","props","isErrorName","touched","isErrorNumber","_jsxs","Field","_ref2","field","FormControl","isInvalid","isRequired","FormLabel","InputGroup","Input","placeholder","focusBorderColor","InputLeftElement","pointerEvents","Icon","as","FiUser","component","_ref3","type","BsTelephone","Button","leftIcon","AiOutlineUserAdd","mt","backgroundColor","colorScheme","List","Item","ContactName","ContactNumber","_templateObject4","ContactModalWindow","contact","isOpen","onClose","Modal","closeOnOverlayClick","isCentered","motionPreset","ModalOverlay","bg","backdropFilter","backdropBlur","ModalContent","w","base","md","ModalHeader","p","ModalCloseButton","ModalBody","editContact","mb","color","isLoading","isSubmitting","ContactList","onDelete","_useState","useState","_useState2","_slicedToArray","setIsOpen","map","isModalOpen","ButtonGroup","size","isAttached","variant","IconButton","icon","GrContactInfo","fill","onClick","contactId","prevIsOpen","_defineProperty","RiDeleteBin2Line","Filter","filter","selectStatusFilter","value","onChange","e","setFilter","target","Title","DivContacts","selectIsLoading","error","selectError","useEffect","fetchContacts","_Fragment","onAdd","newContact","some","length","onChangeInput","currentTarget","Loader","includes","deleteContact"],"sourceRoot":""}